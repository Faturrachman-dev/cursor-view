---
description: Main orchestrator for VAN mode: platform detection, file verification, complexity determination, and optional QA. Fetched when VAN mode starts.
globs: **/visual-maps/van_mode_split/van-mode-map.mdc
alwaysApply: false
---
# VAN MODE: INITIALIZATION PROCESS MAP (AI Instructions)

> **TL;DR:** Initialize project: platform detection, file verification, complexity determination. For L2+ tasks, transition to PLAN. For L1, complete initialization. If 'VAN QA' is called, perform technical validation. This rule orchestrates by fetching specific sub-rules.

## ðŸ§­ VAN MODE PROCESS FLOW (AI Actions)

1.  **Acknowledge & Determine Entry Point:**
    *   If user typed "VAN": Respond "OK VAN - Beginning Initialization Process." Proceed with step 2.
    *   If user typed "VAN QA": Respond "OK VAN QA - Beginning Technical Validation." Skip to step 6.
2.  **Platform Detection (Sub-Rule):**
    a.  State: "Performing platform detection."
    b.  `fetch_rules` to load and follow `.cursor/rules/isolation_rules/visual-maps/van_mode_split/van-platform-detection.mdc`.
    c.  (The fetched rule will guide OS detection and logging to `activeContext.md` via `edit_file`).
3.  **File Verification & Creation (Memory Bank Setup) (Sub-Rule):**
    a.  State: "Performing Memory Bank file verification and setup."
    b.  `fetch_rules` to load and follow `.cursor/rules/isolation_rules/Core/file-verification.mdc`.
    c.  (The fetched rule guides checking/creating `memory-bank/` dir, subdirs, and core `.md` files using `edit_file` and `run_terminal_cmd`).
4.  **Early Complexity Determination (Sub-Rule):**
    a.  State: "Determining task complexity."
    b.  `fetch_rules` to load and follow `.cursor/rules/isolation_rules/Core/complexity-decision-tree.mdc`.
    c.  (The fetched rule guides assessing Level 1-4 and updating `activeContext.md` and `tasks.md` via `edit_file`).
    d.  `read_file memory-bank/activeContext.md` to confirm the determined complexity level.
5.  **Mode Transition based on Complexity:**
    a.  **If Level 1 determined:**
        i.  State: "Task assessed as Level 1. Completing VAN initialization."
        ii. Use `edit_file` to update `memory-bank/activeContext.md` with: "VAN Process Status: Level 1 Initialization Complete. Task ready for IMPLEMENT mode."
        iii. State: "VAN Initialization Complete for Level 1 task [Task Name]. Recommend IMPLEMENT mode." Await user.
    b.  **If Level 2, 3, or 4 determined:**
        i.  State: "ðŸš« LEVEL [2/3/4] TASK DETECTED: [Task Name]. This task REQUIRES detailed planning."
        ii. State: "Transitioning to PLAN mode is necessary. Type 'PLAN' to proceed with planning." Await user.
        iii. (VAN mode is effectively paused here for L2-4 tasks. The user will initiate PLAN mode, which has its own orchestrator).
6.  **VAN QA - Technical Validation (Entry point if "VAN QA" was typed, or if called after CREATIVE mode by user):**
    a.  State: "Initiating VAN QA Technical Validation."
    b.  `fetch_rules` to load and follow `.cursor/rules/isolation_rules/visual-maps/van_mode_split/van-qa-main.mdc`.
    c.  (The `van-qa-main.mdc` will orchestrate the entire QA process, fetching further sub-rules for specific checks and reporting).
    d.  After `van-qa-main.mdc` completes, it will have provided a summary and recommended next steps (e.g., proceed to BUILD or fix issues). Await user action based on that QA report.

## ðŸ”„ QA COMMAND PRECEDENCE (If user types "QA" during steps 2-4 of VAN Initialization)
1.  State: "General QA command received, pausing current VAN initialization step ([current step])."
2.  `fetch_rules` to load and follow `.cursor/rules/isolation_rules/visual-maps/qa-mode-map.mdc` (the general QA orchestrator).
3.  After general QA is complete (and any issues potentially addressed by the user):
    a.  State: "Resuming VAN initialization."
    b.  Re-evaluate or continue from the paused VAN initialization step. For example, if paused during complexity determination, complete it, then proceed to step 5.